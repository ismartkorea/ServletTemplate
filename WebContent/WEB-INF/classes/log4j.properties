# root category 의 레벨(priority)를 DEBUG로 설정한다.
#log4j.rootCategory=DEBUG, stdout, file, console
log4j.rootLogger=DEBUG, stdout, rolling, console
 
# log4j를 설정하는 상세 정보 출력여부(true/false)
log4j.debug=true
 
#---------------------------------
# 첫번째 appender: 콘솔에 로깅
#---------------------------------
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout 
log4j.appender.stdout.ImmediateFlush=true
log4j.appender.stdout.Target=System.err
 
# 출력 Layout 설정: 호출하는 파일명출력
log4j.appender.stdout.layout.ConversionPattern=[%p] (%F) - %m%n
 
#---------------------------------
# 두번째 appender: 파일에 로깅
#---------------------------------
log4j.appender.rolling.Threshold=DEBUG
log4j.appender.rolling=org.apache.log4j.DailyRollingFileAppender
log4j.appender.rolling.ImmediateFlush=true
#log4j.appender.file.File=${catalina.home}/logs/jspHosting.log
#log4j.appender.rolling.File=D:\\My Projects\\ismartkorea\\WebContent\\WEB-INF\\logs\\logfile.log
log4j.appender.rolling.File=/home/hosting_users/koreagoodz/www/WEB-INF/logs/logfile.log
log4j.appender.rolling.Append=true
#log4j.appender.file.MaxFileSize=5MB
#log4j.appender.file.MaxBackupIndex=10
 
 
# 파일명 패턴
log4j.appender.rolling.DatePattern ='.'yyyy-MM-dd
 
# 출력 Layout 설정: 호출하는 시간, 파일명 등 출력
log4j.appender.rolling.layout=org.apache.log4j.PatternLayout
log4j.appender.rolling.layout.ConversionPattern=[%d{HH:mm:ss}] [%p] (%F) - %m%n

# 콘솔 출력.
log4j.appender.console = org.apache.log4j.ConsoleAppender
log4j.appender.console.layout = org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern = %-5p %l - %m%n

# SQL 출력.
log4j.logger.java.sql.Connection = DEBUG
log4j.logger.java.sql.Statement = DEBUG
log4j.logger.java.sql.PreparedStatement = DEBUG
log4j.logger.java.sql.ResultSet = DEBUG

# commons 는 경고 로고만 출력.
log4j.logger.org.apache.commons = WARN
# 카탈리나 는 경고 로그만 출력.
log4j.logger.org.apache.catalina = WARN


